<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vue Login Test</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f3f8fa;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        .test-container {
            min-height: 100vh;
            padding: 20px;
        }
        .login-card {
            background-color: #f3f8fa;
            margin-top: 3rem;
        }
        .big-user-shield-icon {
            font-size: 350%;
        }
        .error-message {
            color: #dc3545;
            font-size: 0.875rem;
            margin-top: 0.5rem;
        }
        .divider {
            position: relative;
            text-align: center;
            margin: 20px 0;
        }
        .divider::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            height: 1px;
            background: #dee2e6;
        }
        .divider-text {
            background: #f3f8fa;
            padding: 0 15px;
            color: #6c757d;
            font-size: 0.875rem;
        }
    </style>
</head>
<body>
    <div id="app" class="test-container">
        <div class="row">
            <div class="col-lg-4 col-md-2"></div>
            <div class="col-lg-4 col-md-8">
                <div class="container login-card pt-5">
                    <div class="main-card">
                        <div class="col-12 mx-auto">
                            <div class="row g-3 pt-1 pb-lg-0 pb-3">
                                <div>
                                    <div class="d-block card-on-background">
                                        <div class="row">
                                            <div class="col-12 px-3">
                                                <img class="img-fluid" src="/vue-legacy/client/src/assets/images/sba_logo.png" alt="Small Business Administration" />
                                                <p class="h5 pb-0 mb-0 mt-2">Welcome to the</p>
                                                <h4><b>Fraud Detection Engine</b></h4>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div>
                                    <div class="card-on-background">
                                        <div class="card-text p-2">
                                            <div class="form-group">
                                                <div class="px-0">
                                                    <div class="d-flex justify-content-between">
                                                        <span class="text-secondary text-dark h6" for="email">
                                                            Email<span class="text-danger">*</span>
                                                        </span>
                                                        <a class="text-right pretty-link" style="text-underline-offset: 4px;" href="#"><small
                                                                class="fw-normal">Forgot Email?</small></a>
                                                    </div>
                                                    <div class="input-group mb-3">
                                                        <span class="input-group-text">
                                                            <i class="far fa-user-circle fa-lg"></i>
                                                        </span>
                                                        <input class="form-control" type="email" name="email" id="email"
                                                            placeholder="Enter your email" required="required" v-model="email" autocomplete="off"
                                                            v-on:blur="populateTenants" />
                                                    </div>
                                                </div>
                                                <br />
                                                <div class="px-0">
                                                    <div class="d-flex justify-content-between">
                                                        <span class="text-secondary text-dark h6" for="password">
                                                            Password<span class="text-danger">*</span>
                                                        </span>
                                                        <a class="text-right pretty-link" style="text-underline-offset: 4px;" href="#"><small
                                                                class="fw-normal">Forgot Password?</small></a>
                                                    </div>
                                                    <div class="input-group mb-3">
                                                        <span class="input-group-text">
                                                            <i class="far fa-lock fa-lg"></i>
                                                        </span>
                                                        <input class="form-control" type="password" name="password" id="password"
                                                            placeholder="Enter your password" required="required" v-model="password" />
                                                    </div>
                                                </div>
                                                <br />
                                                <label class="form-label fw-bold" v-show="tenants.length > 1" for="tenantId">Tenant</label>
                                                <div class="input-group mb-3" v-show="tenants.length > 1">
                                                    <span class="input-group-text">
                                                        <i class="far fa-building fa-lg"></i>
                                                    </span>
                                                    <select class="form-control" name="tenantId" id="tenantId" v-model="selectedTenant">
                                                        <option v-for="tenant in tenants" :value="tenant.name" :key="tenant.name">
                                                            {{ tenant.name }}
                                                        </option>
                                                    </select>
                                                </div>
                                            </div>
                                            <div class="level stretch mt-4 respLoginButtons">
                                                <button type="submit" class="btn btn-secondary float-end" @click="doLogin()" :disabled="loading">
                                                    <span v-if="loading">Signing In...</span>
                                                    <span v-else>Sign In</span>
                                                </button>
                                            </div>
                                            <div class="text-center mt-3" v-if="oauthEnabled">
                                                <div class="divider">
                                                    <span class="divider-text">OR</span>
                                                </div>
                                                <button type="button" class="btn btn-outline-primary w-100" @click="doOAuthLogin()" :disabled="oauthLoading">
                                                    <i class="fas fa-sign-in-alt me-2"></i>
                                                    <span v-if="oauthLoading">Connecting...</span>
                                                    <span v-else>Sign In with {{ oauthProvider }}</span>
                                                </button>
                                            </div>
                                            <br />
                                            <div v-if="error" class="alert alert-danger">{{ error }}</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-4 col-md-2"></div>
        </div>
    </div>

    <!-- Vue.js -->
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    
    <script>
        const { createApp } = Vue;
        
        const app = createApp({
            data() {
                return {
                    email: "",
                    password: "",
                    selectedTenant: "",
                    tenants: [],
                    loading: false,
                    oauthLoading: false,
                    error: null,
                    oauthEnabled: false,
                    oauthProvider: 'SSO'
                };
            },
            methods: {
                // Validate email format
                validateEmail(email) {
                    const validRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;
                    return email.match(validRegex);
                },

                // Populate tenants for the user
                async populateTenants() {
                    if (!this.email || !this.validateEmail(this.email)) {
                        return;
                    }

                    try {
                        // Check if user exists and get their tenants
                        const response = await axios.get(`/auth/check-user?email=${encodeURIComponent(this.email)}`);
                        
                        if (response.data.exists) {
                            this.tenants = response.data.tenants;
                            if (this.tenants.length > 0) {
                                this.selectedTenant = this.tenants[0].name;
                            }
                        } else {
                            this.tenants = [];
                            this.selectedTenant = "";
                        }
                    } catch (error) {
                        console.error('Error checking user:', error);
                        this.tenants = [];
                    }
                },

                // Main login function
                async doLogin() {
                    if (!this.email || !this.password) {
                        this.showError("Please enter both email and password.");
                        return;
                    }

                    if (!this.validateEmail(this.email)) {
                        this.showError("Please enter a valid email address.");
                        return;
                    }

                    this.loading = true;
                    this.error = null;

                    try {
                        // Attempt login
                        const loginData = {
                            username: this.email, // Passport expects 'username' field
                            password: this.password
                        };

                        const response = await axios.post('/auth/login', loginData);

                        if (response.status === 200) {
                            // Handle successful login
                            await this.handleSuccessfulLogin(response.data);
                        }
                    } catch (error) {
                        console.error('Login error:', error);
                        
                        if (error.response) {
                            if (error.response.status === 401) {
                                this.showError("Invalid email or password.");
                            } else if (error.response.status === 403) {
                                this.showError("Access denied. Please contact your administrator.");
                            } else {
                                this.showError("Login failed. Please try again.");
                            }
                        } else {
                            this.showError("Network error. Please check your connection.");
                        }
                    } finally {
                        this.loading = false;
                    }
                },

                // Handle successful login
                async handleSuccessfulLogin(loginData) {
                    try {
                        // Store authentication data
                        sessionStorage.setItem("isLoggedIn", "true");
                        sessionStorage.setItem("user", JSON.stringify(loginData.user));
                        sessionStorage.setItem("tenant", JSON.stringify(loginData.tenant));
                        sessionStorage.setItem("permissions", JSON.stringify(loginData.permissions));
                        sessionStorage.setItem("roles", JSON.stringify(loginData.roles));

                        // Redirect to Vue dashboard
                        window.location.href = `/t/${loginData.tenant.name}/vue-dashboard`;
                    } catch (error) {
                        console.error('Error handling successful login:', error);
                        this.showError("Login successful but there was an error setting up your session.");
                    }
                },

                // Show error message
                showError(message) {
                    this.error = message;
                },

                // Clear error message
                clearError() {
                    this.error = null;
                },

                // Load OAuth configuration
                async loadOAuthConfig() {
                    try {
                        const response = await axios.get('/auth/oauth-config');
                        this.oauthEnabled = response.data.oauthEnabled;
                        this.oauthProvider = response.data.provider;
                    } catch (error) {
                        console.error('Error loading OAuth config:', error);
                        this.oauthEnabled = false;
                    }
                },

                // OAuth login function
                doOAuthLogin() {
                    this.oauthLoading = true;
                    this.error = null;
                    
                    try {
                        // Redirect to OAuth endpoint
                        window.location.href = '/auth/oauth';
                    } catch (error) {
                        console.error('OAuth login error:', error);
                        this.showError("Failed to initiate OAuth login.");
                        this.oauthLoading = false;
                    }
                }
            },
            async created() {
                // Clear any existing session
                sessionStorage.setItem("isLoggedIn", "false");
                sessionStorage.removeItem("user");
                sessionStorage.removeItem("tenant");
                sessionStorage.removeItem("permissions");
                sessionStorage.removeItem("roles");
                
                // Load OAuth configuration
                await this.loadOAuthConfig();
            },
            mounted() {
                // Clear session on mount
                sessionStorage.setItem("isLoggedIn", "false");
            },
        });
        
        app.mount('#app');
    </script>
</body>
</html> 